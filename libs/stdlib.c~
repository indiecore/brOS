#include "kernel.h"	//for the time headers
#include "stdlib.h"

int timer_ticks = 0;
unsigned long seconds = 0;

int atoi(const char *str) {
	unsigned int v=0,neg=0;
	for(;*str;str++) {
		if(*str>'0'&&*str<='9') {
			int d=*str-'0';
			if(v>214748364) {
				if(d>7) {
					return neg?0x80000000:0x7FFFFFFF;
				}
			}
			v=v*10+d;
		} else if(*str=='-') {
			neg=1;
		}
	}
	return (neg?-1:1)*v;
}

void itoa(int val, char *str, unsigned int b, unsigned int z) {
	int neg=(val<0);
	unsigned int p,o=32,i,n,bp,v=(b==10)?(neg?-val:val):val;
	for(n=0; n<32; n++) {
		str[n]=0;
		p=31-n;
		bp=1;
		for(i=0; i<p; i++) {
			bp*=b;
			if(bp==0) {
				n++;
				break;
			}
		}
		while(v>=bp && bp!=0) {
			v-=bp;
			str[n]++;
			if(o>n) {
				o=n;
			}
		}
	}
	if(b==10&&neg) {
		o--;
	}
	if(o<z) {
		o=z;
	}
	for(i=0; i<32-o; i++) {
		int v=str[i+o];
		str[i]=v+((v>9)?('A'-10):'0');
	}
	if(b==10&&neg) {
		str[0]='-';
	}
	str[32-o]=0;
}

unsigned char inportb(unsigned short port)
{
	unsigned char rv;
	asm volatile ("inb %1, %0": "=a" (rv) : "dN" (port));
	return rv;
}

void outportb (unsigned short port, unsigned char data)
{
	asm volatile ("outb %1, %0": : "dN" (port), "a" (data));
}


void timer_handler(struct regs *r)
{
	timer_ticks++;
	
	if(timer_ticks %18 ==0)		//clock pulses at 18.222 hz
		seconds++;
}

void timer_install()
{
//	timer_ticks = 0;
	irq_install_handler(0,timer_handler);
	outportb(0x43,0x36);	//set the timer to repeat mode
}

void wait(int ticks)
{

    //timer_install();
    unsigned long eticks;

	eticks = timer_ticks + ticks;
   	while((stime()/18) < eticks)
	{
		asm volatile("nop");
	}
}


int stime()	//time since start up
{
	return seconds;	//clock pulses at 18.222 ticks per second
}
